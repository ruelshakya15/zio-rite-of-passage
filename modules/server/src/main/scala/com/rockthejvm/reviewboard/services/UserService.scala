package com.rockthejvm.reviewboard.services

import zio.*

import com.rockthejvm.reviewboard.repositories.UserRepository

import java.security.SecureRandom // FOR HASHING AND PASSWORD WE USE THIS JAVA library
import javax.crypto.SecretKeyFactory
import javax.crypto.spec.PBEKeySpec

import com.rockthejvm.reviewboard.repositories.RecoveryTokensRepository
import com.rockthejvm.reviewboard.repositories.RecoveryTokensRepositoryLive
import com.rockthejvm.reviewboard.domain.data.{User, UserToken}
import com.rockthejvm.reviewboard.domain.errors.*

trait UserService {
  def registerUser(email: String, password: String): Task[User]
  def verifyPassword(email: String, password: String): Task[Boolean]
  def updatePassword(email: String, oldPassword: String, newPassword: String): Task[User]
  def deleteUser(email: String, password: String): Task[User]
  // JWT
  def generateToken(email: String, password: String): Task[Option[UserToken]]
  // password recovery flow
  def sendPasswordRecoveryToken(email: String): Task[Unit]
  def recoverPasswordFromToken(email: String, token: String, newPassword: String): Task[Boolean]
}

class UserServiceLive private (
    jwtService: JWTService,
    emailService: EmailService,
    userRepo: UserRepository,
    tokenRepo: RecoveryTokensRepository
) extends UserService {
  override def registerUser(email: String, password: String): Task[User] =
    userRepo.create(
      User(
        id = -1L, // generated by the DB
        email = email,
        hashedPassword = UserServiceLive.Hasher.generateHash(password)
      )
    )
  override def verifyPassword(email: String, password: String): Task[Boolean] =
    for {
      existingUser <- userRepo.getByEmail(
        email
      ) // removed someOrFail to exception as test was crashing
      result <- existingUser match {
        case Some(user) =>
          ZIO
            .attempt(UserServiceLive.Hasher.validateHash(password, user.hashedPassword))
            .orElseSucceed(false) // just incase attempt fails return ZIO.succeed(false)
        case None => ZIO.succeed(false)
      }

    } yield result

  override def updatePassword(email: String, oldPassword: String, newPassword: String): Task[User] =
    for {
      existingUser <- userRepo
        .getByEmail(email)
        .someOrFail(UnauthorizedException(s"User $email doesn't exist."))
      verifiedPass <- ZIO.attempt(
        UserServiceLive.Hasher.validateHash(oldPassword, existingUser.hashedPassword)
      )
      updatedUser <- userRepo
        .update(
          existingUser.id,
          user => user.copy(hashedPassword = UserServiceLive.Hasher.generateHash(newPassword))
        )
        .when(verifiedPass)
        .someOrFail(new RuntimeException(s"Could not update password for $email"))
    } yield updatedUser

  override def deleteUser(email: String, password: String): Task[User] =
    for {
      existingUser <- userRepo
        .getByEmail(email)
        .someOrFail(UnauthorizedException(s"User $email doesn't exist."))
      verifiedPass <- ZIO.attempt(
        UserServiceLive.Hasher.validateHash(password, existingUser.hashedPassword)
      )
      deletedUser <- userRepo
        .delete(existingUser.id)
        .when(verifiedPass)
        .someOrFail(new RuntimeException(s"Could not update password for $email"))
    } yield deletedUser

  override def generateToken(email: String, password: String): Task[Option[UserToken]] =
    for {
      existingUser <- userRepo
        .getByEmail(email)
        .someOrFail(UnauthorizedException(s"User $email doesn't exist."))
      verified <- ZIO.attempt(
        UserServiceLive.Hasher.validateHash(password, existingUser.hashedPassword)
      )
      maybeToken <- jwtService
        .createToken(existingUser)
        .when(
          verified
        ) // ***IMP .when() zio function that executes returns Option[A] if bool value true
    } yield maybeToken

  // password recovery flow
  override def sendPasswordRecoveryToken(email: String): Task[Unit] =
    // get a token from the tokenRepo
    // email the token to the email
    tokenRepo.getToken(email).flatMap {
      case Some(token) => emailService.sendPasswordRecoveryEmail(email, token)
      case None        => ZIO.unit
    }

  override def recoverPasswordFromToken(
      email: String,
      token: String,
      newPassword: String
  ): Task[Boolean] =
    for {
      existingUser <- userRepo
        .getByEmail(email)
        .someOrFail(new RuntimeException("Non-existent user"))
      tokenIsValid <- tokenRepo.checkToken(email, token)
      result <- userRepo
        .update(
          existingUser.id,
          user => user.copy(hashedPassword = UserServiceLive.Hasher.generateHash(newPassword))
        )
        .when(tokenIsValid)
        .map(_.nonEmpty) // checking Option is not empty

    } yield result
}

object UserServiceLive {
  val layer = ZLayer {
    for {
      jwtService   <- ZIO.service[JWTService]
      emailService <- ZIO.service[EmailService]
      userRepo     <- ZIO.service[UserRepository]
      tokenRepo    <- ZIO.service[RecoveryTokensRepository]
    } yield new UserServiceLive(jwtService, emailService, userRepo, tokenRepo)
  }

  object Hasher {

    // private

    // HERE WE ARE GOING REALLY LOW LEVEL
    private val PBKDF2_ALGORITHM: String = "PBKDF2WithHmacSHA512"
    private val PBKDF2_ITERATIONS: Int   = 1000
    private val SALT_BYTE_SIZE: Int      = 24
    private val HASH_BYTE_SIZE: Int =
      24 // this provided to control and know the length of keySpec: PBEKeySpec
    val skf: SecretKeyFactory = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM)

    private def pbkdf2(
        message: Array[Char],
        salt: Array[Byte],
        iterations: Int,
        nBytes: Int
    ): Array[Byte] = {
      // javax.crypto library
      val keySpec: PBEKeySpec =
        new PBEKeySpec(message, salt, iterations, nBytes * 8) // * 8 because bits required
      skf.generateSecret(keySpec).getEncoded()
    }

    private def toHex(array: Array[Byte]): String =
      array.map(b => "%02X".format(b)).mkString
    // hex-encoded byte (because if we try to store Array[Byte] we get unreadable characters)
    // eg "2F 4A 56" -> each is a single byte easier to parse

    private def fromHex(string: String): Array[Byte] = {
      string.sliding(2, 2).toArray.map {
        hexValue => // ".sliding(size, step)" fxn for Scala String to take chars and change to Iterable[String]
          Integer.parseInt(hexValue, 16).toByte
      }
    }

    // a(i) ^ b(i) [XOR] for every i
    private def compareBytes(a: Array[Byte], b: Array[Byte]): Boolean = {
      val range = 0 until math.min(a.length, b.length)
      val diff = range.foldLeft(a.length ^ b.length) { case (acc, i) =>
        acc | a(i) ^ b(i)
      }
      diff == 0
    }

    // to hash we need -> (string + salt(Randomly generated string) + nIterations) we are going to use PBKDF2 algorithm
    // eg: "1000:AAAAAAAAAA:BBBBBBBBBB"

    def generateHash(string: String): String = {
      // java.security library
      val rng: SecureRandom = new SecureRandom()
      val salt: Array[Byte] = Array.ofDim[Byte](SALT_BYTE_SIZE)
      rng.nextBytes(salt) // creates 24 random bytes
      val hashBytes = pbkdf2(string.toCharArray(), salt, PBKDF2_ITERATIONS, HASH_BYTE_SIZE)
      s"$PBKDF2_ITERATIONS:${toHex(salt)}:${toHex(hashBytes)}"
    }

    def validateHash(string: String, hash: String): Boolean = {
      val hashSegments = hash.split(":")
      val nIterations  = hashSegments(0).toInt
      val salt         = fromHex(hashSegments(1))
      val validHash    = fromHex(hashSegments(2))
      val testHash     = pbkdf2(string.toCharArray(), salt, nIterations, HASH_BYTE_SIZE)
      compareBytes(
        testHash,
        validHash
      ) // since "==" method works weirdly with Array[Byte] we created own method
    }
  }

}

object UserServiceDemo {
  def main(args: Array[String]) =
    println(UserServiceLive.Hasher.generateHash("rockthejvm"))
    println(
      UserServiceLive.Hasher.validateHash(
        "rockthejvm",
        "1000:A5BA81F5750E120CE22F244C870B6C616DF2F7DA90D17F13:66A65DF77BF719324FBCBEF76B2F829B571137763B2838E3"
      )
    )
}
